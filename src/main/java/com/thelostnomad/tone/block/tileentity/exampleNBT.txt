Writing:

//parentNBTTagCompound.setInteger("ticksLeft", ticksLeftTillDisappear);
        // alternatively - could use parentNBTTagCompound.setTag("ticksLeft", new NBTTagInt(ticksLeftTillDisappear));

        // some examples of other NBT tags - browse NBTTagCompound or search for the subclasses of NBTBase for more examples

        parentNBTTagCompound.setString("testString", testString);

        NBTTagCompound blockPosNBT = new NBTTagCompound();        // NBTTagCompound is similar to a Java HashMap
        blockPosNBT.setInteger("x", testBlockPos.getX());
        blockPosNBT.setInteger("y", testBlockPos.getY());
        blockPosNBT.setInteger("z", testBlockPos.getZ());
        parentNBTTagCompound.setTag("testBlockPos", blockPosNBT);

        NBTTagCompound itemStackNBT = new NBTTagCompound();
        testItemStack.writeToNBT(itemStackNBT);                     // make sure testItemStack is not null first!
        parentNBTTagCompound.setTag("testItemStack", itemStackNBT);

        parentNBTTagCompound.setIntArray("testIntArray", testIntArray);

        NBTTagList doubleArrayNBT = new NBTTagList();                     // an NBTTagList is similar to a Java ArrayList
        for (double value : testDoubleArray) {
            doubleArrayNBT.appendTag(new NBTTagDouble(value));
        }
        parentNBTTagCompound.setTag("testDoubleArray", doubleArrayNBT);

        NBTTagList doubleArrayWithNullsNBT = new NBTTagList();
        for (int i = 0; i < testDoubleArrayWithNulls.length; ++i) {
            Double value = testDoubleArrayWithNulls[i];
            if (value != null) {
                NBTTagCompound dataForThisSlot = new NBTTagCompound();
                dataForThisSlot.setInteger("i", i+1);   // avoid using 0, so the default when reading a missing value (0) is obviously invalid
                dataForThisSlot.setDouble("v", value);
                doubleArrayWithNullsNBT.appendTag(dataForThisSlot);
            }
        }
        parentNBTTagCompound.setTag("testDoubleArrayWithNulls", doubleArrayWithNullsNBT);

// Reading

// important rule: never trust the data you read from NBT, make sure it can't cause a crash

        final int NBT_INT_ID = 3;					// see NBTBase.createNewByType()
        int readTicks = INVALID_VALUE;
        if (parentNBTTagCompound.hasKey("ticksLeft", NBT_INT_ID)) {  // check if the key exists and is an Int. You can omit this if a default value of 0 is ok.
            readTicks = parentNBTTagCompound.getInteger("ticksLeft");
            if (readTicks < 0) readTicks = INVALID_VALUE;
        }
        ticksLeftTillDisappear = readTicks;

        // some examples of other NBT tags - browse NBTTagCompound or search for the subclasses of NBTBase for more

        String readTestString = null;
        final int NBT_STRING_ID = 8;          // see NBTBase.createNewByType()
        if (parentNBTTagCompound.hasKey("testString", NBT_STRING_ID)) {
            readTestString = parentNBTTagCompound.getString("testString");
        }
        if (!testString.equals(readTestString)) {
            System.err.println("testString mismatch:" + readTestString);
        }

        NBTTagCompound blockPosNBT = parentNBTTagCompound.getCompoundTag("testBlockPos");
        BlockPos readBlockPos = null;
        if (blockPosNBT.hasKey("x", NBT_INT_ID) && blockPosNBT.hasKey("y", NBT_INT_ID) && blockPosNBT.hasKey("z", NBT_INT_ID) ) {
            readBlockPos = new BlockPos(blockPosNBT.getInteger("x"), blockPosNBT.getInteger("y"), blockPosNBT.getInteger("z"));
        }
        if (readBlockPos == null || !testBlockPos.equals(readBlockPos)) {
            System.err.println("testBlockPos mismatch:" + readBlockPos);
        }

        NBTTagCompound itemStackNBT = parentNBTTagCompound.getCompoundTag("testItemStack");
        ItemStack readItemStack = new ItemStack(itemStackNBT);
        if (!ItemStack.areItemStacksEqual(testItemStack, readItemStack)) {
            System.err.println("testItemStack mismatch:" + readItemStack);
        }

        int [] readIntArray = parentNBTTagCompound.getIntArray("testIntArray");
        if (!Arrays.equals(testIntArray, readIntArray)) {
            System.err.println("testIntArray mismatch:" + readIntArray);
        }

        final int NBT_DOUBLE_ID = 6;					// see NBTBase.createNewByType()
        NBTTagList doubleArrayNBT = parentNBTTagCompound.getTagList("testDoubleArray", NBT_DOUBLE_ID);
        int numberOfEntries = Math.min(doubleArrayNBT.tagCount(), testDoubleArray.length);
        double [] readDoubleArray = new double[numberOfEntries];
        for (int i = 0; i < numberOfEntries; ++i) {
            readDoubleArray[i] = doubleArrayNBT.getDoubleAt(i);
        }
        if (doubleArrayNBT.tagCount() != numberOfEntries || !Arrays.equals(readDoubleArray, testDoubleArray)) {
            System.err.println("testDoubleArray mismatch:" + readDoubleArray);
        }

        final int NBT_COMPOUND_ID = 10;					// see NBTBase.createNewByType()
        NBTTagList doubleNullArrayNBT = parentNBTTagCompound.getTagList("testDoubleArrayWithNulls", NBT_COMPOUND_ID);
        numberOfEntries = Math.min(doubleArrayNBT.tagCount(), testDoubleArrayWithNulls.length);
        Double [] readDoubleNullArray = new Double[numberOfEntries];
        for (int i = 0; i < doubleNullArrayNBT.tagCount(); ++i)	{
            NBTTagCompound nbtEntry = doubleNullArrayNBT.getCompoundTagAt(i);
            int idx = nbtEntry.getInteger("i") - 1;
            if (nbtEntry.hasKey("v", NBT_DOUBLE_ID) && idx >= 0 && idx < numberOfEntries) {
                readDoubleNullArray[idx] = nbtEntry.getDouble("v");
            }
        }
        if (!Arrays.equals(testDoubleArrayWithNulls, readDoubleNullArray)) {
            System.err.println("testDoubleArrayWithNulls mismatch:" + readDoubleNullArray);
        }